name: Android CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag -l --sort=-v:refname | head -n 1)
          if [ -z "$latest_tag" ]; then
            new_tag="v1.1.2"
          else
            version="${latest_tag//v/}"
            IFS='.' read -r major minor patch <<< "$version"
            patch=$((patch+1))
            new_tag="v${major}.${minor}.${patch}"
          fi

          while git rev-parse "refs/tags/$new_tag" >/dev/null 2>&1; do
            patch=$((patch+1))
            new_tag="v${major}.${minor}.${patch}"
          done

          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Create new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ env.new_tag }}
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
          git push origin ${{ env.new_tag }}

      - name: Build APK (Release)
        run: ./gradlew assembleRelease 2>&1 | tee build_log.txt || true

      - name: Build AAB (Release)
        run: ./gradlew bundleRelease 2>&1 | tee -a build_log.txt || true

      - name: Verify APK and AAB Files
        run: |
          echo "Listing APK and AAB files:"
          find app/build/outputs -type f

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: "Release ${{ env.new_tag }}"
          draft: false
          prerelease: false

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload AAB to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/bundle/release/app-release.aab
          asset_name: app-release.aab
          asset_content_type: application/octet-stream

      - name: Notify Telegram and Send Files
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            STATUS="Сборка успешно завершена!"
            MESSAGE="Проект: ${GITHUB_REPOSITORY}%0AСтатус: ${STATUS}%0AВерсия: ${{ env.new_tag }}"
          else
            STATUS="Сборка завершилась с ошибками!"
            if [ -f build_log.txt ]; then
              ERROR_LOG=$(tail -n 10 build_log.txt)
              MESSAGE="Проект: ${GITHUB_REPOSITORY}%0AСтатус: ${STATUS}%0AВерсия: ${{ env.new_tag }}%0AПоследние ошибки:%0A${ERROR_LOG}"
            else
              MESSAGE="Проект: ${GITHUB_REPOSITORY}%0AСтатус: ${STATUS}%0AВерсия: ${{ env.new_tag }}%0AЛог сборки недоступен."
            fi
          fi
          
          curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage \
            -d chat_id=${TELEGRAM_CHAT_ID} \
            -d text="$MESSAGE"

          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument \
              -F chat_id=${TELEGRAM_CHAT_ID} \
              -F document=@app/build/outputs/apk/release/app-release.apk \
              -F caption="APK файл сборки: ${{ env.new_tag }}"
          fi

          if [ -f "app/build/outputs/bundle/release/app-release.aab" ]; then
            curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument \
              -F chat_id=${TELEGRAM_CHAT_ID} \
              -F document=@app/build/outputs/bundle/release/app-release.aab \
              -F caption="AAB файл сборки: ${{ env.new_tag }}"
          fi
